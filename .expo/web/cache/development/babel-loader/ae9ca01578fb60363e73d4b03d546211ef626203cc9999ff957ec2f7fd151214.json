{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onChangeText\", \"onChange\", \"value\", \"mask\", \"disabled\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { TextInput } from 'react-native-paper';\nvar splitCharacters = ['-', '/', '.', '年', ' '];\nfunction detectCharacter(mask) {\n  var c = splitCharacters.find(function (ch) {\n    return mask.includes(ch);\n  });\n  return c || '';\n}\nfunction TextInputWithMask(_ref, ref) {\n  var onChangeText = _ref.onChangeText,\n    _onChange = _ref.onChange,\n    value = _ref.value,\n    mask = _ref.mask,\n    disabled = _ref.disabled,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _React$useState = React.useState(value || ''),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    controlledValue = _React$useState2[0],\n    setControlledValue = _React$useState2[1];\n  var onInnerChange = function onInnerChange(text) {\n    var splitCharacter = detectCharacter(mask);\n    var maskParts = mask.split(splitCharacter);\n    var trimmedText = text.trim();\n    var format = maskParts[0].toLowerCase() + splitCharacter + maskParts[1].toLowerCase() + splitCharacter + maskParts[2].toLowerCase();\n    var match = new RegExp(format.replace(/(\\w+)\\W(\\w+)\\W(\\w+)/, '^\\\\s*($1)\\\\W*($2)?\\\\W*($3)?([0-9]*).*').replace(/m|d|y/g, '\\\\d'));\n    var replaceValue = format.match(/\\W/);\n    var replace = (\"$1\" + splitCharacter + \"$2\" + splitCharacter + \"$3$4\").replace(new RegExp(splitCharacter, 'g'), replaceValue != null ? replaceValue : '');\n    var isBackSpace = controlledValue.length > trimmedText.length;\n    if (!isBackSpace) {\n      trimmedText = trimmedText.replace(/(^|\\W)(?=\\d\\W)/g, '$10').replace(match, replace).replace(/(\\W)+/g, '$1');\n    }\n    if (trimmedText.length === mask.length) {\n      onChangeText && onChangeText(trimmedText);\n    }\n    setControlledValue(trimmedText);\n  };\n  React.useEffect(function () {\n    setControlledValue(value || '');\n  }, [value]);\n  return React.createElement(TextInput, _extends({\n    ref: ref\n  }, rest, {\n    disabled: disabled,\n    value: controlledValue,\n    onChangeText: onInnerChange,\n    onChange: function onChange(e) {\n      _onChange && _onChange(e);\n    },\n    maxLength: 10\n  }));\n}\nexport default React.forwardRef(TextInputWithMask);","map":{"version":3,"names":["React","TextInput","splitCharacters","detectCharacter","mask","c","find","ch","includes","TextInputWithMask","_ref","ref","onChangeText","onChange","value","disabled","rest","_objectWithoutProperties","_excluded","_React$useState","useState","_React$useState2","_slicedToArray","controlledValue","setControlledValue","onInnerChange","text","splitCharacter","maskParts","split","trimmedText","trim","format","toLowerCase","match","RegExp","replace","replaceValue","isBackSpace","length","useEffect","createElement","_extends","e","maxLength","forwardRef"],"sources":["C:\\Users\\jonat\\OneDrive\\Escritorio\\segundoTrabajoRN-master\\node_modules\\react-native-paper-dates\\src\\TextInputMask.tsx"],"sourcesContent":["import * as React from 'react'\nimport { TextInput } from 'react-native-paper'\n\nconst splitCharacters = ['-', '/', '.', '年', ' ']\nfunction detectCharacter(mask: string): string {\n  const c = splitCharacters.find((ch) => mask.includes(ch))\n  return c || ''\n}\n\nfunction TextInputWithMask(\n  {\n    onChangeText,\n    onChange,\n    value,\n    mask,\n    disabled,\n    ...rest\n  }: React.ComponentProps<typeof TextInput> & { mask: string; value: string },\n  ref: any\n) {\n  const [controlledValue, setControlledValue] = React.useState<string>(\n    value || ''\n  )\n\n  const onInnerChange = (text: string) => {\n    const splitCharacter = detectCharacter(mask)\n    const maskParts = mask.split(splitCharacter)\n\n    let trimmedText = text.trim()\n    const format =\n      maskParts[0].toLowerCase() +\n      splitCharacter +\n      maskParts[1].toLowerCase() +\n      splitCharacter +\n      maskParts[2].toLowerCase()\n    const match = new RegExp(\n      format\n        .replace(/(\\w+)\\W(\\w+)\\W(\\w+)/, '^\\\\s*($1)\\\\W*($2)?\\\\W*($3)?([0-9]*).*')\n        .replace(/m|d|y/g, '\\\\d')\n    )\n    const replaceValue = format.match(/\\W/)\n    const replace = `$1${splitCharacter}$2${splitCharacter}$3$4`.replace(\n      new RegExp(splitCharacter, 'g'),\n      (replaceValue ?? '') as string\n    )\n\n    const isBackSpace = controlledValue.length > trimmedText.length\n\n    if (!isBackSpace) {\n      trimmedText = trimmedText\n        .replace(/(^|\\W)(?=\\d\\W)/g, '$10')\n        .replace(match, replace)\n        .replace(/(\\W)+/g, '$1')\n    }\n\n    if (trimmedText.length === mask.length) {\n      onChangeText && onChangeText(trimmedText)\n    }\n\n    setControlledValue(trimmedText)\n  }\n\n  React.useEffect(() => {\n    setControlledValue(value || '')\n  }, [value])\n\n  return (\n    <TextInput\n      ref={ref}\n      {...rest}\n      disabled={disabled}\n      value={controlledValue}\n      onChangeText={onInnerChange}\n      onChange={(e) => {\n        onChange && onChange(e)\n      }}\n      maxLength={10}\n    />\n  )\n}\n\nexport default React.forwardRef(TextInputWithMask)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}