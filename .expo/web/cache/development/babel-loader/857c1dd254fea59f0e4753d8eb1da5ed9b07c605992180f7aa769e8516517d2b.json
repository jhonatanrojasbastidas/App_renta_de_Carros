{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { Text, useTheme } from 'react-native-paper';\nimport { clockTypes, toHourInputFormat, toHourOutputFormat } from \"./timeUtils\";\nimport TimeInput from \"./TimeInput\";\nimport AmPmSwitcher from \"./AmPmSwitcher\";\nimport { useLatest } from \"../utils\";\nimport Color from 'color';\nfunction TimeInputs(_ref) {\n  var hours = _ref.hours,\n    minutes = _ref.minutes,\n    onFocusInput = _ref.onFocusInput,\n    focused = _ref.focused,\n    inputType = _ref.inputType,\n    onChange = _ref.onChange,\n    is24Hour = _ref.is24Hour,\n    inputFontSize = _ref.inputFontSize;\n  var startInput = React.useRef(null);\n  var endInput = React.useRef(null);\n  var dimensions = useWindowDimensions();\n  var isLandscape = dimensions.width > dimensions.height;\n  var theme = useTheme();\n  var onSubmitStartInput = React.useCallback(function () {\n    if (endInput.current) {\n      endInput.current.focus();\n    }\n  }, [endInput]);\n  var onSubmitEndInput = React.useCallback(function () {}, []);\n  var minutesRef = useLatest(minutes);\n  var onChangeHours = React.useCallback(function (newHours) {\n    onChange({\n      hours: newHours,\n      minutes: minutesRef.current,\n      focused: clockTypes.hours\n    });\n  }, [onChange, minutesRef]);\n  return React.createElement(View, {\n    style: [styles.inputContainer, isLandscape && styles.inputContainerLandscape]\n  }, React.createElement(View, {\n    style: styles.column\n  }, React.createElement(TimeInput, {\n    ref: startInput,\n    inputFontSize: inputFontSize,\n    placeholder: '00',\n    value: toHourInputFormat(hours, is24Hour),\n    clockType: clockTypes.hours,\n    pressed: focused === clockTypes.hours,\n    onPress: onFocusInput,\n    inputType: inputType,\n    selectionColor: theme.dark ? Color(theme.colors.primary).darken(0.2).hex() : theme.colors.primary,\n    returnKeyType: 'next',\n    onSubmitEditing: onSubmitStartInput,\n    blurOnSubmit: false,\n    onChanged: function onChanged(newHoursFromInput) {\n      var newHours = toHourOutputFormat(newHoursFromInput, hours, is24Hour);\n      if (newHoursFromInput > 24) {\n        newHours = 24;\n      }\n      onChange({\n        hours: newHours,\n        minutes: minutes\n      });\n    }\n  }), inputType === 'keyboard' ? React.createElement(Text, {\n    variant: \"bodySmall\"\n  }, \"Hour\") : null), React.createElement(View, {\n    style: [styles.hoursAndMinutesSeparator, {\n      marginBottom: inputType === 'keyboard' ? 24 : 0\n    }]\n  }, React.createElement(View, {\n    style: styles.spaceDot\n  }), React.createElement(View, {\n    style: [styles.dot, {\n      backgroundColor: theme !== null && theme !== void 0 && theme.isV3 ? theme.colors.onSurface : theme.colors.text\n    }]\n  }), React.createElement(View, {\n    style: styles.betweenDot\n  }), React.createElement(View, {\n    style: [styles.dot, {\n      backgroundColor: theme !== null && theme !== void 0 && theme.isV3 ? theme.colors.onSurface : theme.colors.text\n    }]\n  }), React.createElement(View, {\n    style: styles.spaceDot\n  })), React.createElement(View, {\n    style: styles.column\n  }, React.createElement(TimeInput, {\n    ref: endInput,\n    inputFontSize: inputFontSize,\n    placeholder: '00',\n    value: minutes,\n    clockType: clockTypes.minutes,\n    pressed: focused === clockTypes.minutes,\n    onPress: onFocusInput,\n    inputType: inputType,\n    selectionColor: theme.dark ? Color(theme.colors.primary).darken(0.2).hex() : theme.colors.primary,\n    onSubmitEditing: onSubmitEndInput,\n    onChanged: function onChanged(newMinutesFromInput) {\n      var newMinutes = newMinutesFromInput;\n      if (newMinutesFromInput > 59) {\n        newMinutes = 59;\n      }\n      onChange({\n        hours: hours,\n        minutes: newMinutes\n      });\n    }\n  }), inputType === 'keyboard' ? React.createElement(Text, {\n    variant: \"bodySmall\"\n  }, \"Minute\") : null), !is24Hour && React.createElement(React.Fragment, null, React.createElement(View, {\n    style: styles.spaceBetweenInputsAndSwitcher\n  }), React.createElement(AmPmSwitcher, {\n    hours: hours,\n    onChange: onChangeHours,\n    inputType: inputType\n  })));\n}\nvar styles = StyleSheet.create({\n  column: {\n    flexDirection: 'column'\n  },\n  spaceBetweenInputsAndSwitcher: {\n    width: 12\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  inputContainerLandscape: {\n    flex: 1\n  },\n  hoursAndMinutesSeparator: {\n    fontSize: 65,\n    width: 24,\n    alignItems: 'center'\n  },\n  spaceDot: {\n    flex: 1\n  },\n  dot: {\n    width: 7,\n    height: 7,\n    borderRadius: 7 / 2\n  },\n  betweenDot: {\n    height: 12\n  }\n});\nexport default React.memo(TimeInputs);","map":{"version":3,"names":["React","View","StyleSheet","useWindowDimensions","Text","useTheme","clockTypes","toHourInputFormat","toHourOutputFormat","TimeInput","AmPmSwitcher","useLatest","Color","TimeInputs","_ref","hours","minutes","onFocusInput","focused","inputType","onChange","is24Hour","inputFontSize","startInput","useRef","endInput","dimensions","isLandscape","width","height","theme","onSubmitStartInput","useCallback","current","focus","onSubmitEndInput","minutesRef","onChangeHours","newHours","createElement","style","styles","inputContainer","inputContainerLandscape","column","ref","placeholder","value","clockType","pressed","onPress","selectionColor","dark","colors","primary","darken","hex","returnKeyType","onSubmitEditing","blurOnSubmit","onChanged","newHoursFromInput","variant","hoursAndMinutesSeparator","marginBottom","spaceDot","dot","backgroundColor","isV3","onSurface","text","betweenDot","newMinutesFromInput","newMinutes","Fragment","spaceBetweenInputsAndSwitcher","create","flexDirection","alignItems","flex","fontSize","borderRadius","memo"],"sources":["C:\\Users\\jonat\\OneDrive\\Escritorio\\segundoTrabajoRN-master\\node_modules\\react-native-paper-dates\\src\\Time\\TimeInputs.tsx"],"sourcesContent":["import * as React from 'react'\nimport {\n  View,\n  StyleSheet,\n  useWindowDimensions,\n  TextInput as TextInputNative,\n} from 'react-native'\nimport { MD2Theme, Text, useTheme } from 'react-native-paper'\n\nimport {\n  clockTypes,\n  PossibleClockTypes,\n  PossibleInputTypes,\n  toHourInputFormat,\n  toHourOutputFormat,\n} from './timeUtils'\nimport TimeInput from './TimeInput'\nimport AmPmSwitcher from './AmPmSwitcher'\nimport { useLatest } from '../utils'\nimport Color from 'color'\n\nfunction TimeInputs({\n  hours,\n  minutes,\n  onFocusInput,\n  focused,\n  inputType,\n  onChange,\n  is24Hour,\n  inputFontSize,\n}: {\n  inputType: PossibleInputTypes\n  focused: PossibleClockTypes\n  hours: number\n  minutes: number\n  onFocusInput: (type: PossibleClockTypes) => any\n  onChange: (hoursMinutesAndFocused: {\n    hours: number\n    minutes: number\n    focused?: undefined | PossibleClockTypes\n  }) => any\n  is24Hour: boolean\n  inputFontSize?: number\n}) {\n  const startInput = React.useRef<TextInputNative | null>(null)\n  const endInput = React.useRef<TextInputNative | null>(null)\n  const dimensions = useWindowDimensions()\n  const isLandscape = dimensions.width > dimensions.height\n  const theme = useTheme()\n\n  const onSubmitStartInput = React.useCallback(() => {\n    if (endInput.current) {\n      endInput.current.focus()\n    }\n  }, [endInput])\n\n  const onSubmitEndInput = React.useCallback(() => {\n    // TODO: close modal and persist time\n  }, [])\n\n  const minutesRef = useLatest(minutes)\n  const onChangeHours = React.useCallback(\n    (newHours: number) => {\n      onChange({\n        hours: newHours,\n        minutes: minutesRef.current,\n        focused: clockTypes.hours,\n      })\n    },\n    [onChange, minutesRef]\n  )\n\n  return (\n    <View\n      style={[\n        styles.inputContainer,\n        isLandscape && styles.inputContainerLandscape,\n      ]}\n    >\n      <View style={styles.column}>\n        <TimeInput\n          ref={startInput}\n          inputFontSize={inputFontSize}\n          placeholder={'00'}\n          value={toHourInputFormat(hours, is24Hour)}\n          clockType={clockTypes.hours}\n          pressed={focused === clockTypes.hours}\n          onPress={onFocusInput}\n          inputType={inputType}\n          selectionColor={\n            theme.dark\n              ? Color(theme.colors.primary).darken(0.2).hex()\n              : theme.colors.primary\n          }\n          returnKeyType={'next'}\n          onSubmitEditing={onSubmitStartInput}\n          blurOnSubmit={false}\n          onChanged={(newHoursFromInput) => {\n            let newHours = toHourOutputFormat(\n              newHoursFromInput,\n              hours,\n              is24Hour\n            )\n            if (newHoursFromInput > 24) {\n              newHours = 24\n            }\n            onChange({\n              hours: newHours,\n              minutes,\n            })\n          }}\n        />\n        {inputType === 'keyboard' ? (\n          <Text variant=\"bodySmall\">Hour</Text>\n        ) : null}\n      </View>\n      <View\n        style={[\n          styles.hoursAndMinutesSeparator,\n          // eslint-disable-next-line react-native/no-inline-styles\n          { marginBottom: inputType === 'keyboard' ? 24 : 0 },\n        ]}\n      >\n        <View style={styles.spaceDot} />\n        <View\n          style={[\n            styles.dot,\n            {\n              backgroundColor: theme?.isV3\n                ? theme.colors.onSurface\n                : (theme as any as MD2Theme).colors.text,\n            },\n          ]}\n        />\n        <View style={styles.betweenDot} />\n        <View\n          style={[\n            styles.dot,\n            {\n              backgroundColor: theme?.isV3\n                ? theme.colors.onSurface\n                : (theme as any as MD2Theme).colors.text,\n            },\n          ]}\n        />\n        <View style={styles.spaceDot} />\n      </View>\n      <View style={styles.column}>\n        <TimeInput\n          ref={endInput}\n          inputFontSize={inputFontSize}\n          placeholder={'00'}\n          value={minutes}\n          clockType={clockTypes.minutes}\n          pressed={focused === clockTypes.minutes}\n          onPress={onFocusInput}\n          inputType={inputType}\n          selectionColor={\n            theme.dark\n              ? Color(theme.colors.primary).darken(0.2).hex()\n              : theme.colors.primary\n          }\n          onSubmitEditing={onSubmitEndInput}\n          onChanged={(newMinutesFromInput) => {\n            let newMinutes = newMinutesFromInput\n            if (newMinutesFromInput > 59) {\n              newMinutes = 59\n            }\n            onChange({\n              hours,\n              minutes: newMinutes,\n            })\n          }}\n        />\n        {inputType === 'keyboard' ? (\n          <Text variant=\"bodySmall\">Minute</Text>\n        ) : null}\n      </View>\n      {!is24Hour && (\n        <>\n          <View style={styles.spaceBetweenInputsAndSwitcher} />\n          <AmPmSwitcher\n            hours={hours}\n            onChange={onChangeHours}\n            inputType={inputType}\n          />\n        </>\n      )}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  column: {\n    flexDirection: 'column',\n  },\n  spaceBetweenInputsAndSwitcher: { width: 12 },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  inputContainerLandscape: {\n    flex: 1,\n  },\n  hoursAndMinutesSeparator: {\n    fontSize: 65,\n    width: 24,\n    alignItems: 'center',\n  },\n  spaceDot: {\n    flex: 1,\n  },\n  dot: {\n    width: 7,\n    height: 7,\n    borderRadius: 7 / 2,\n  },\n  betweenDot: {\n    height: 12,\n  },\n})\n\nexport default React.memo(TimeInputs)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}