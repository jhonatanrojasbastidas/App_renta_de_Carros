{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"value\", \"clockType\", \"pressed\", \"onPress\", \"onChanged\", \"inputType\", \"inputFontSize\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useTheme, TouchableRipple } from 'react-native-paper';\nimport Color from 'color';\nimport { inputTypes, useInputColors } from \"./timeUtils\";\nfunction TimeInput(_ref, ref) {\n  var value = _ref.value,\n    clockType = _ref.clockType,\n    pressed = _ref.pressed,\n    _onPress = _ref.onPress,\n    onChanged = _ref.onChanged,\n    inputType = _ref.inputType,\n    _ref$inputFontSize = _ref.inputFontSize,\n    inputFontSize = _ref$inputFontSize === void 0 ? 57 : _ref$inputFontSize,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _React$useState = React.useState(\"\" + value),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    controlledValue = _React$useState2[0],\n    setControlledValue = _React$useState2[1];\n  var onInnerChange = function onInnerChange(text) {\n    setControlledValue(text);\n    if (text !== '' && text !== '0') {\n      onChanged(Number(text));\n    }\n  };\n  React.useEffect(function () {\n    setControlledValue(\"\" + value);\n  }, [value]);\n  var theme = useTheme();\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    inputFocused = _React$useState4[0],\n    setInputFocused = _React$useState4[1];\n  var highlighted = inputType === inputTypes.picker ? pressed : inputFocused;\n  var _useInputColors = useInputColors(highlighted),\n    color = _useInputColors.color,\n    backgroundColor = _useInputColors.backgroundColor;\n  var formattedValue = controlledValue;\n  if (!inputFocused) {\n    formattedValue = controlledValue.length === 1 ? \"0\" + controlledValue : \"\" + controlledValue;\n  }\n  return React.createElement(View, {\n    style: styles.root\n  }, React.createElement(TextInput, _extends({\n    ref: ref,\n    style: [styles.input, {\n      color: color,\n      fontSize: inputFontSize,\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness * 2,\n      borderColor: theme.isV3 && highlighted ? theme.colors.onPrimaryContainer : undefined,\n      borderWidth: theme.isV3 && highlighted ? 2 : 0,\n      height: inputType === inputTypes.keyboard ? 72 : 80\n    }],\n    value: formattedValue,\n    maxLength: 2,\n    onFocus: function onFocus() {\n      return setInputFocused(true);\n    },\n    onBlur: function onBlur() {\n      return setInputFocused(false);\n    },\n    keyboardAppearance: theme.dark ? 'dark' : 'default',\n    keyboardType: \"number-pad\",\n    onChangeText: onInnerChange\n  }, rest)), _onPress && inputType === inputTypes.picker ? React.createElement(TouchableRipple, {\n    style: [StyleSheet.absoluteFill, styles.buttonOverlay, {\n      borderRadius: theme.roundness\n    }],\n    rippleColor: Platform.OS !== 'ios' ? Color(theme.colors.onSurface).fade(0.7).hex() : undefined,\n    onPress: function onPress() {\n      return _onPress(clockType);\n    },\n    borderless: true\n  }, React.createElement(View, null)) : null);\n}\nvar styles = StyleSheet.create({\n  root: {\n    position: 'relative',\n    height: 80,\n    width: 96\n  },\n  input: {\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    width: 96\n  },\n  buttonOverlay: {\n    overflow: 'hidden'\n  }\n});\nexport default React.forwardRef(TimeInput);","map":{"version":3,"names":["React","View","TextInput","StyleSheet","Platform","useTheme","TouchableRipple","Color","inputTypes","useInputColors","TimeInput","_ref","ref","value","clockType","pressed","onPress","onChanged","inputType","_ref$inputFontSize","inputFontSize","rest","_objectWithoutProperties","_excluded","_React$useState","useState","_React$useState2","_slicedToArray","controlledValue","setControlledValue","onInnerChange","text","Number","useEffect","theme","_React$useState3","_React$useState4","inputFocused","setInputFocused","highlighted","picker","_useInputColors","color","backgroundColor","formattedValue","length","createElement","style","styles","root","_extends","input","fontSize","borderRadius","roundness","borderColor","isV3","colors","onPrimaryContainer","undefined","borderWidth","height","keyboard","maxLength","onFocus","onBlur","keyboardAppearance","dark","keyboardType","onChangeText","absoluteFill","buttonOverlay","rippleColor","OS","onSurface","fade","hex","borderless","create","position","width","textAlign","textAlignVertical","overflow","forwardRef"],"sources":["C:\\Users\\jonat\\OneDrive\\Escritorio\\Segundo_Momento\\node_modules\\react-native-paper-dates\\src\\Time\\TimeInput.tsx"],"sourcesContent":["import * as React from 'react'\nimport {\n  View,\n  TextInput,\n  TextInputProps,\n  StyleSheet,\n  Platform,\n} from 'react-native'\nimport { useTheme, TouchableRipple } from 'react-native-paper'\n\nimport Color from 'color'\nimport {\n  inputTypes,\n  PossibleClockTypes,\n  PossibleInputTypes,\n  useInputColors,\n} from './timeUtils'\n\ninterface TimeInputProps\n  extends Omit<Omit<TextInputProps, 'value'>, 'onFocus'> {\n  value: number\n  clockType: PossibleClockTypes\n  onPress?: (type: PossibleClockTypes) => any\n  pressed: boolean\n  onChanged: (n: number) => any\n  inputType: PossibleInputTypes\n  inputFontSize?: number\n}\n\nfunction TimeInput(\n  {\n    value,\n    clockType,\n    pressed,\n    onPress,\n    onChanged,\n    inputType,\n    inputFontSize = 57,\n    ...rest\n  }: TimeInputProps,\n  ref: any\n) {\n  const [controlledValue, setControlledValue] = React.useState<string>(\n    `${value}`\n  )\n\n  const onInnerChange = (text: string) => {\n    setControlledValue(text)\n    if (text !== '' && text !== '0') {\n      onChanged(Number(text))\n    }\n  }\n\n  React.useEffect(() => {\n    setControlledValue(`${value}`)\n  }, [value])\n\n  const theme = useTheme()\n  const [inputFocused, setInputFocused] = React.useState<boolean>(false)\n\n  const highlighted = inputType === inputTypes.picker ? pressed : inputFocused\n\n  const { color, backgroundColor } = useInputColors(highlighted)\n\n  let formattedValue = controlledValue\n  if (!inputFocused) {\n    formattedValue =\n      controlledValue.length === 1\n        ? `0${controlledValue}`\n        : `${controlledValue}`\n  }\n\n  return (\n    <View style={styles.root}>\n      <TextInput\n        ref={ref}\n        style={[\n          styles.input,\n          // eslint-disable-next-line react-native/no-inline-styles\n          {\n            color,\n            fontSize: inputFontSize,\n            backgroundColor,\n            borderRadius: theme.roundness * 2,\n            borderColor:\n              theme.isV3 && highlighted\n                ? theme.colors.onPrimaryContainer\n                : undefined,\n            borderWidth: theme.isV3 && highlighted ? 2 : 0,\n            height: inputType === inputTypes.keyboard ? 72 : 80,\n          },\n        ]}\n        value={formattedValue}\n        maxLength={2}\n        onFocus={() => setInputFocused(true)}\n        onBlur={() => setInputFocused(false)}\n        keyboardAppearance={theme.dark ? 'dark' : 'default'}\n        keyboardType=\"number-pad\"\n        onChangeText={onInnerChange}\n        {...rest}\n      />\n      {onPress && inputType === inputTypes.picker ? (\n        <TouchableRipple\n          style={[\n            StyleSheet.absoluteFill,\n            styles.buttonOverlay,\n            {\n              borderRadius: theme.roundness,\n            },\n          ]}\n          rippleColor={\n            Platform.OS !== 'ios'\n              ? Color(theme.colors.onSurface).fade(0.7).hex()\n              : undefined\n          }\n          onPress={() => onPress(clockType)}\n          borderless={true}\n        >\n          <View />\n        </TouchableRipple>\n      ) : null}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  root: { position: 'relative', height: 80, width: 96 },\n  input: {\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    width: 96,\n  },\n  buttonOverlay: { overflow: 'hidden' },\n})\n\nexport default React.forwardRef(TimeInput)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}