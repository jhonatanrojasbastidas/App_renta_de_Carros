{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { inputTypes, toHourInputFormat, toHourOutputFormat } from \"./timeUtils\";\nimport AnalogClock from \"./AnalogClock\";\nimport { circleSize } from \"./timeUtils\";\nimport TimeInputs from \"./TimeInputs\";\nexport var DisplayModeContext = React.createContext({\n  mode: 'AM',\n  setMode: function setMode() {}\n});\nfunction TimePicker(_ref) {\n  var hours = _ref.hours,\n    minutes = _ref.minutes,\n    onFocusInput = _ref.onFocusInput,\n    focused = _ref.focused,\n    inputType = _ref.inputType,\n    onChange = _ref.onChange,\n    locale = _ref.locale,\n    use24HourClock = _ref.use24HourClock,\n    inputFontSize = _ref.inputFontSize;\n  var _React$useState = React.useState(undefined),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    displayMode = _React$useState2[0],\n    setDisplayMode = _React$useState2[1];\n  var dimensions = useWindowDimensions();\n  var isLandscape = dimensions.width > dimensions.height;\n  var is24Hour = React.useMemo(function () {\n    if (use24HourClock !== undefined) {\n      return use24HourClock;\n    }\n    var formatter = new Intl.DateTimeFormat(locale, {\n      hour: '2-digit',\n      minute: '2-digit',\n      timeZone: 'UTC'\n    });\n    var formatted = formatter.format(new Date(Date.UTC(2020, 1, 1, 23)));\n    return formatted.includes('23');\n  }, [locale, use24HourClock]);\n  React.useEffect(function () {\n    if (hours >= 12) {\n      setDisplayMode('PM');\n    } else {\n      setDisplayMode('AM');\n    }\n  }, []);\n  var onInnerChange = React.useCallback(function (params) {\n    params.hours = toHourOutputFormat(params.hours, hours, is24Hour);\n    onChange(params);\n  }, [onChange, hours, is24Hour]);\n  return React.createElement(DisplayModeContext.Provider, {\n    value: {\n      mode: displayMode,\n      setMode: setDisplayMode\n    }\n  }, React.createElement(View, {\n    style: isLandscape ? [styles.rootLandscape, {\n      width: 24 * 3 + 96 * 2 + 52 + (inputType === inputTypes.picker ? circleSize : -circleSize)\n    }] : styles.rootPortrait\n  }, React.createElement(TimeInputs, {\n    inputType: inputType,\n    inputFontSize: inputFontSize,\n    hours: hours,\n    minutes: minutes,\n    is24Hour: is24Hour,\n    onChange: onChange,\n    onFocusInput: onFocusInput,\n    focused: focused\n  }), inputType === inputTypes.picker ? React.createElement(View, {\n    style: styles.clockContainer\n  }, React.createElement(AnalogClock, {\n    hours: toHourInputFormat(hours, is24Hour),\n    minutes: minutes,\n    focused: focused,\n    is24Hour: is24Hour,\n    onChange: onInnerChange\n  })) : null));\n}\nvar styles = StyleSheet.create({\n  rootLandscape: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  rootPortrait: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  clockContainer: {\n    paddingTop: 36,\n    paddingLeft: 12,\n    paddingRight: 12\n  }\n});\nexport default React.memo(TimePicker);","map":{"version":3,"names":["React","View","StyleSheet","useWindowDimensions","inputTypes","toHourInputFormat","toHourOutputFormat","AnalogClock","circleSize","TimeInputs","DisplayModeContext","createContext","mode","setMode","TimePicker","_ref","hours","minutes","onFocusInput","focused","inputType","onChange","locale","use24HourClock","inputFontSize","_React$useState","useState","undefined","_React$useState2","_slicedToArray","displayMode","setDisplayMode","dimensions","isLandscape","width","height","is24Hour","useMemo","formatter","Intl","DateTimeFormat","hour","minute","timeZone","formatted","format","Date","UTC","includes","useEffect","onInnerChange","useCallback","params","createElement","Provider","value","style","styles","rootLandscape","picker","rootPortrait","clockContainer","create","flexDirection","alignItems","justifyContent","paddingTop","paddingLeft","paddingRight","memo"],"sources":["C:\\Users\\jonat\\OneDrive\\Escritorio\\Segundo_Momento\\node_modules\\react-native-paper-dates\\src\\Time\\TimePicker.tsx"],"sourcesContent":["import * as React from 'react'\nimport { View, StyleSheet, useWindowDimensions } from 'react-native'\n\nimport {\n  inputTypes,\n  PossibleClockTypes,\n  PossibleInputTypes,\n  toHourInputFormat,\n  toHourOutputFormat,\n} from './timeUtils'\n\nimport AnalogClock from './AnalogClock'\nimport { circleSize } from './timeUtils'\nimport TimeInputs from './TimeInputs'\n\nexport const DisplayModeContext = React.createContext<{\n  mode: 'AM' | 'PM' | undefined\n  setMode: React.Dispatch<React.SetStateAction<'AM' | 'PM' | undefined>>\n}>({ mode: 'AM', setMode: () => {} })\n\ntype onChangeFunc = ({\n  hours,\n  minutes,\n  focused,\n}: {\n  hours: number\n  minutes: number\n  focused?: undefined | PossibleClockTypes\n}) => any\n\nfunction TimePicker({\n  hours,\n  minutes,\n  onFocusInput,\n  focused,\n  inputType,\n  onChange,\n  locale,\n  use24HourClock,\n  inputFontSize,\n}: {\n  locale?: undefined | string\n  inputType: PossibleInputTypes\n  focused: PossibleClockTypes\n  hours: number\n  minutes: number\n  onFocusInput: (type: PossibleClockTypes) => any\n  onChange: onChangeFunc\n  use24HourClock?: boolean\n  inputFontSize?: number\n}) {\n  const [displayMode, setDisplayMode] = React.useState<'AM' | 'PM' | undefined>(\n    undefined\n  )\n  const dimensions = useWindowDimensions()\n  const isLandscape = dimensions.width > dimensions.height\n\n  // method to check whether we have 24 hours in clock or 12\n  const is24Hour = React.useMemo(() => {\n    if (use24HourClock !== undefined) {\n      return use24HourClock\n    }\n    const formatter = new Intl.DateTimeFormat(locale, {\n      hour: '2-digit',\n      minute: '2-digit',\n      timeZone: 'UTC',\n    })\n    const formatted = formatter.format(new Date(Date.UTC(2020, 1, 1, 23)))\n    return formatted.includes('23')\n  }, [locale, use24HourClock])\n\n  // Initialize display Mode according the hours value\n  React.useEffect(() => {\n    if (hours >= 12) {\n      setDisplayMode('PM')\n    } else {\n      setDisplayMode('AM')\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const onInnerChange = React.useCallback<onChangeFunc>(\n    (params) => {\n      params.hours = toHourOutputFormat(params.hours, hours, is24Hour)\n      onChange(params)\n    },\n    [onChange, hours, is24Hour]\n  )\n\n  return (\n    <DisplayModeContext.Provider\n      value={{ mode: displayMode, setMode: setDisplayMode }}\n    >\n      <View\n        style={\n          isLandscape\n            ? [\n                styles.rootLandscape,\n                {\n                  width:\n                    24 * 3 +\n                    96 * 2 +\n                    52 +\n                    (inputType === inputTypes.picker\n                      ? circleSize\n                      : -circleSize),\n                },\n              ]\n            : styles.rootPortrait\n        }\n      >\n        <TimeInputs\n          inputType={inputType}\n          inputFontSize={inputFontSize}\n          hours={hours}\n          minutes={minutes}\n          is24Hour={is24Hour}\n          onChange={onChange}\n          onFocusInput={onFocusInput}\n          focused={focused}\n        />\n        {inputType === inputTypes.picker ? (\n          <View style={styles.clockContainer}>\n            <AnalogClock\n              hours={toHourInputFormat(hours, is24Hour)}\n              minutes={minutes}\n              focused={focused}\n              is24Hour={is24Hour}\n              onChange={onInnerChange}\n            />\n          </View>\n        ) : null}\n      </View>\n    </DisplayModeContext.Provider>\n  )\n}\n\nconst styles = StyleSheet.create({\n  rootLandscape: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  rootPortrait: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  clockContainer: { paddingTop: 36, paddingLeft: 12, paddingRight: 12 },\n})\n\nexport default React.memo(TimePicker)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}